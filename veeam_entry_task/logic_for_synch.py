import hashlib
import os
import shutil


source_folder = (
    "/Users/martinadivinova/PycharmProjects/veeam_entry_task/source"
)
replica_folder = "/Users/martinadivinova/PycharmProjects/veeam_entry_task/replica"
log_file_path = "/Users/martinadivinova/PycharmProjects/veeam_entry_task/veeam_entry_task/aa.txt"


# check if replica folder exists
def check_folder_exists(folder_path: str) -> None:
    if not os.path.exists(folder_path):
        os.mkdir(folder_path)
    return None



def create_folder_hash(folder_path:str) -> dict:
    hash_map = {}
    folder_files = os.listdir(folder_path)
    for file in folder_files:   # file = file name (path)
        hash_file = hash_file_blake2(folder_path, file)
        hash_map[hash_file] = file
    return hash_map


def hash_file_blake2(folder: str, file_path: str) -> str:  # -> HashKey:
    with open(f"{folder}/{file_path}", "rb") as f:
        blake2b_hash = hashlib.file_digest(f, "sha256").hexdigest()
    return blake2b_hash


# def compare_add_hash_keys(generated_hash_key: str, file_path: str) -> dict:
#     """
#     Compare hash keys of the source file and the replica file.
#     :param generated_hash_key: hash key of the source file, generated by hash_file_blake2
#     :param file_path: path of the source file
#     :return:
#     """
#
#     if generated_hash_key not in hash_keys_compare and file_path not in hash_keys_compare.values():
#         hash_keys_compare[generated_hash_key] = file_path
#     return hash_keys_compare


def replace_files(source_file_path: str, replica_file_path: str):
    shutil.copyfile(source_file_path, replica_file_path)


def delete_files(file_path: str):
    os.remove(file_path)



def create_new_file(file_path: str):
    with open(file_path, "w") as file:
        file.write("")


if __name__ == "__main__":

    check_folder_exists(replica_folder)

    source_hash_map = create_folder_hash(source_folder)
    replica_hash_map = create_folder_hash(replica_folder)
    print(f"source hash map = {source_hash_map}")
    print(f"replica hash map = {replica_hash_map}")

    #delete files that are not in source folder
    source_file_set = set(source_hash_map.keys())
    replica_file_set = set(replica_hash_map.keys())
    to_delete = replica_file_set - source_file_set
    for file in to_delete:
        delete_files(f"{replica_folder}/{replica_hash_map[file]}")

    for hash, file_name in source_hash_map.items():
        #hash found
        if hash in replica_hash_map and file_name == replica_hash_map[hash]:
            continue
        elif hash in replica_hash_map and file_name != replica_hash_map[hash]:
            replace_files(f"{source_folder}/{file_name}", f"{replica_folder}/{file_name}")

        #hash not found
        else:
            replace_files(f"{source_folder}/{file_name}", f"{replica_folder}/{file_name}")


